import os
os.system("cls")


def clean_email_list(emails):
    # in case the emails list is an empty list , the answer of the call of emails must be the empty list itself
    if not emails:
        print(emails)
        # in that case (of empty list) you must put one return in the end after printing emails . Otherwise , after the action of the
        # condicion is ended the other actions bellow (and out of the condicion) will be accomplished too and we dont want that .
        return
    # Strip and lowercase all emails
    cleaned = map(lambda x: x.strip().lower(), emails)
    # filter out the emails that has more than 1 "@" icon or no "@" icon
    cleaned = filter(lambda x: x.count("@") == 1, cleaned)
 
    # the list created bellow will keep all the list of substrings(splited by the separator "@") of the emails
    list_of_list_of_subs_strings = []
    # now we are running the striped , lowed , just 1 "@" icon items of the list of emails emails
    for Email in cleaned:
        #  being Email one item of the list cleaned will be creating a list with the substring of that email using the separate operator "@"
        list_of_substr = Email.split("@")
        # bellow we will check if all items of the list list_of_substr is not empty , if it is we will pass , if
        # is not we will put it in the lis_of_list_of_subs_strings list .
        if all(len(substr) >= 1 for substr in list_of_substr):
            list_of_list_of_subs_strings.append(list_of_substr)
        else:
            pass
    # creating the list valid_emails to keep all valid emails
    valid_emails = []
    for subs_string_of_email in list_of_list_of_subs_strings:
        # we will run the items of the list of substrings , that is a list of the substrings of each email
        rejoined_email = "@".join(subs_string_of_email)
        valid_emails.append(rejoined_email)
    # aqui vai deixar em cleaned sÃ³ os emails
    # cleaned = filter(lambda x: len(x) >= 2, list_of_list_of_subs_strings)
    print(valid_emails)


# test cases
email1 = ["Test@EXAMPLE.com",  "invalid.email",
          " user@domain@.com",   "space@email.com",  "valid@domain.com"]
print("#"*30, "list of emails one", "#"*30)
clean_email_list(email1)

email2 = ["user1@domain.com",  "user2@domain.com"]
print("#"*30, "list of emails two", "#"*30)
clean_email_list(email2)

email3 = ["@nodomain.com",  "noat",  "multiple@@ats.com"]
print("#"*30, "list of emails tree", "#"*30)
clean_email_list(email3)

email4 = []
print("#"*30, "list of emails four", "#"*30)
clean_email_list(email4)

email5 = ["R@DOMAIN.COM",  " space@domain.com ",  "NoSpaces@domain.com"]
print("#"*30, "list of emails five", "#"*30)
clean_email_list(email5)
